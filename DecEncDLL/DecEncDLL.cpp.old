// DecEncDLL.cpp : Defines the exported functions for the DLL application.
// uses: C:\WINDOWS\WinSxS\x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.30729.1_x-ww_6f74963e\msvcr90.dll

#include "stdafx.h"
#include <stdio.h>
#include <openssl/pkcs7.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/x509.h> 
#include <openssl/pem.h>

#define CHECK(x) if((x)==NULL) return(__LINE__);

int init()
{
  EVP_add_cipher(EVP_des_ede3_cbc());
  EVP_add_digest(EVP_sha1());
//  ERR_load_crypto_strings();
  return(0);
}

int deallocCA(char *output[])
{
  if(*output!=NULL)
  {
	free(*output);
	*output=NULL;
	return(1);
  }
  return(0);
}

int Decrypt(char *output[],char certsigfile[],char privsigfile[],char data[],int **datasize)
{
  BIO *temp;
  PKCS7 *pke=NULL;
  X509 *x509=NULL;
  EVP_PKEY *pkey=NULL;

  FILE *fp;
  char radka[1000];
  int i=0,j=0,pos=0;

// Private key read

  fp = fopen(privsigfile, "r");
  CHECK(fp);
  pkey = PEM_read_PrivateKey(fp, NULL, NULL, NULL);
  fclose(fp);
  CHECK(pkey);

// Public cert for private key read
  fp = fopen (certsigfile, "r"); // for DER it has to be "rb"
  CHECK(fp);
  x509 = PEM_read_X509(fp, NULL, NULL, NULL); //PEM
//  x509 = d2i_X509_fp(fp,NULL); //DER
  fclose (fp);
  CHECK(x509);

// preparing PKCS7 envelope
/*
  pke = PKCS7_new();
  PKCS7_set_type(pke, NID_pkcs7_enveloped);
  ERR_print_errors_fp (stderr);
  PKCS7_set_cipher(pke, EVP_des_ede3_cbc()); //must be added
  ERR_print_errors_fp(stderr);
  PKCS7_add_recipient(pke, x509);
*/
// data copying to PKCS7 structure
  temp=BIO_new(BIO_s_mem());
  BIO_write(temp,data,*(*datasize));
  pke=PEM_read_bio_PKCS7(temp,NULL,NULL,NULL);
  BIO_free_all(temp);  
  CHECK(pke);

// get data

  temp = PKCS7_dataDecode(pke, pkey, NULL, x509);
//  ERR_print_errors_fp (stderr);
//  BIO_flush(temp);

// get data from pkcs7
//  i2d_PKCS7_bio(temp,pke); //writing PKCS7 data to memory stream
  *(*datasize)=(BIO_ctrl_pending(temp))/sizeof(char); //sizeof(char) == 1 in most cases, but who knows...
  if(*output!=NULL) free(*output);
  *output=(char*)malloc(sizeof(char)*(*(*datasize))); //data output 
  
  while((j=BIO_read(temp,radka,1000))>0) //while it can be read
  {
	for(i=0;i<j;i++) //copy byte by byte (char by char :-)
	{
	  (*output)[i+pos]=radka[i]; //aka output[0][i+pos]=radka[i];
	}
	pos+=j;
  }

  *(*datasize)=pos; //why? ctrl_pending not reliable?

// no memory leaks
  BIO_free_all(temp);
  EVP_PKEY_free(pkey);
  PKCS7_free(pke);
  X509_free(x509);

// return something clever
  return(0);
}

int Encrypt(char *output[],char cert[],char data[],int datasize)
{
  BIO *temp,*p7bio=NULL;
  PKCS7 *pke=NULL;
  X509 *x509=NULL;
  int delka,pos=0,i=0,j=0;
  char radka[1000];

// public cert read from string using memory BIO

  temp=BIO_new(BIO_s_mem());
  BIO_write(temp,cert,strlen(cert)); //strlen <--> base64 encoded
  x509=PEM_read_bio_X509(temp,NULL,NULL,NULL);
  BIO_free_all(temp);
  CHECK(x509);

// preparing PKCS7 envelope

  pke = PKCS7_new();
  CHECK(pke);
  PKCS7_set_type(pke, NID_pkcs7_enveloped);
  PKCS7_set_cipher(pke, EVP_des_ede3_cbc()); //must be added
  PKCS7_add_recipient(pke, x509);

// data copying to PKCS7 structure
  p7bio = PKCS7_dataInit(pke, NULL);
  CHECK(p7bio);
  BIO_write(p7bio,data,datasize);
  BIO_flush(p7bio);
  PKCS7_dataFinal(pke,p7bio);
  BIO_free_all(p7bio);

// PKCS7 ready, writing PKCS7-PEM

  temp=BIO_new(BIO_s_mem());
  PEM_write_bio_PKCS7(temp,pke); //writing PKCS7 to memory stream with PEM enconding
  delka=(BIO_ctrl_pending(temp))/sizeof(char)+1; //sizeof(char) == 1 in most cases, but who knows... + 1 for '\0'
  if(*output!=NULL) free(*output);
  *output=(char*)malloc(sizeof(char)*delka); //data output 
  
  while((j=BIO_read(temp,radka,1000))>0) //while it can be read
  {
	for(i=0;i<j;i++) //copy byte by byte (char by char :-)
	{
	  (*output)[i+pos]=radka[i]; //aka output[0][i+pos]=radka[i];
	}
	pos+=j;
  }
  (*output)[delka-1]='\0'; //end of string; output[0][delka-1]='\0';

// no memory leaks
  BIO_free_all(temp);
  PKCS7_free(pke);
  X509_free(x509);

//return something clever :-)
  return(0);
}

int SignEncrypt(char *output[],char certencfile[],char certsigfile[], char privsigfile[],char data[],int datasize)
{
  FILE *fp;
  PKCS7 *pk=NULL;
  PKCS7_SIGNER_INFO *si;
  X509 *x509=NULL;
  EVP_PKEY *pkey=NULL;
  BIO *pkBIO,*temp;
  int delka,pos=0,i=0,j=0;
  char radka[1000],*sigoutput;
  
// Private key read

  fp = fopen(privsigfile, "r");
  CHECK(fp);
  pkey = PEM_read_PrivateKey(fp, NULL, NULL, NULL);
  fclose(fp);
  CHECK(pkey);

// Public cert for private key read
  fp = fopen (certsigfile, "r"); // for DER it has to be "rb"
  CHECK(fp);
  x509 = PEM_read_X509(fp, NULL, NULL, NULL); //PEM
//  x509 = d2i_X509_fp(fp,NULL); //DER
  fclose (fp);
  CHECK(x509);

// preparing PKCS7 strucure
  pk=PKCS7_new();
  PKCS7_set_type(pk,NID_pkcs7_signed);
  CHECK(pk);

// add signature
  si=PKCS7_add_signature(pk,x509,pkey,EVP_sha1());

// add current time
  PKCS7_add_signed_attribute(si, NID_pkcs9_contentType, V_ASN1_OBJECT,OBJ_nid2obj(NID_pkcs7_data));

// add certificate for check
  PKCS7_add_certificate(pk,x509);

// add content for signing
  PKCS7_content_new(pk,NID_pkcs7_data);
  pkBIO=PKCS7_dataInit(pk,NULL);
  BIO_write(pkBIO,data,datasize);
  BIO_flush(pkBIO);
  PKCS7_dataFinal(pk,pkBIO);
  BIO_free_all(pkBIO);

// write PKCS7 to memory stream, DER encoded (!)

  temp=BIO_new(BIO_s_mem());
  i2d_PKCS7_bio(temp, pk);; //writing PKCS7 to memory stream with DER enconding
  delka=(BIO_ctrl_pending(temp)); //number of bytes (char)
  sigoutput=(char*)malloc(sizeof(char)*delka); //data output 
  
  while((j=BIO_read(temp,radka,1000))>0) //while it can be read
  {
	for(i=0;i<j;i++) //copy byte by byte (char by char :-)
	{
	  sigoutput[i+pos]=radka[i];
	}
	pos+=j;
  }

// no memory leaks
  EVP_PKEY_free(pkey);
  BIO_free_all(temp);
  PKCS7_free(pk);
  X509_free(x509);

//  PKCS7_signer_info_free();
    
// Envelope it!
  Encrypt(output,certencfile,sigoutput,delka);

// free garbage
  free(sigoutput); //not needed now

// return
  return(0);
}